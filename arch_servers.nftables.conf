#!/usr/bin/nft -f
#
#TODO:
#
#Changelog:
#	1. Removed counters everywhere.
#	2. Temporary removed DHCP check rules (netdev ingress, ${net_lan_dhcp})
#	3. Include tail in the end for host-specific rules.
#	4. Added timeouts to flow tables.
#
flush ruleset
define nic_lo=lo
define nic_lan=eth0
#	address_arch_repo=$(getent ahostsv4 HOSTNAME | awk 'BEGIN {ORS=", "} !x[$1]++ { print $1 }')
#	net_lan_dhcp=$(for i in $(getent ahostsv4 LOCAL_DOMAIN_NAME | awk '!x[$1]++ { print $1 }'); do ip n | grep $i" " | awk '{ORS=", "} { print $5 }';done)
#[[[sensible_var_block_begin]]]
define net_lan=
define address_arch_repo=
define address_salt_master=
#define net_lan_dhcp=
#[[[sensible_var_block_end]]]
table ip filter {
	chain input {
		type filter hook input priority 0; policy drop;
		ct state established accept
		iif $nic_lo accept
		ct state invalid meta mark set 0x100 goto evil_invalid
		ip protocol vmap { tcp : jump input_tcp , udp : jump input_udp , icmp : jump input_icmp}
		ip protocol != tcp limit rate 3/second reject with icmp type port-unreachable
		ip protocol tcp limit rate 3/second reject with tcp reset
	}

	chain input_tcp {
		ct state . tcp flags != { new . syn} meta mark set 0x101 goto evil_invalid
		iif . ct state . tcp dport { eth0 . new . 22} goto input_ssh
	}

	chain input_udp {
		iif . udp sport . udp dport . ct state { $nic_lan . 67 . 68 . new} accept
	}

	chain input_icmp {
		iif . icmp type . ct state { $nic_lan . echo-request . new} ip saddr $net_lan limit rate 3/second accept
	}

	chain input_ssh {
		ip saddr $net_lan flow table neutral_ssh { iif . ip saddr . ether saddr timeout 1m limit rate 3/minute} accept
		flow table evil_ssh { iif . ip saddr . ether saddr timeout 1m limit rate 1/minute} log prefix "nftables evil_ssh " level err drop
	}

	chain evil_invalid {
		flow table evil_invalid { iif . ip saddr . ether saddr . meta mark timeout 1m limit rate 1/minute} log prefix "nftables evil_invalid [ 0x100=INVALID, 0x101=NEW_NOT_SYN ] " level notice drop
	}

	chain forward {
		type filter hook forward priority 0; policy drop;
	}

	chain output {
		type filter hook output priority 0; policy drop;
		ct state established accept
		oif $nic_lo accept
		ip protocol vmap { tcp : jump output_tcp , udp : jump output_udp , icmp : jump output_icmp}
	}

	chain output_tcp {
		oif . ct state { $nic_lan . new} tcp dport 4505-4506 ip daddr $address_salt_master accept
		oif . tcp dport . ct state { $nic_lan . 443 . new} ip daddr $address_arch_repo accept
	}

	chain output_udp {
		oif . udp dport . ct state { $nic_lan . 53 . new} ip daddr $net_lan accept
	}

	chain output_icmp {
		oif . icmp type { $nic_lan . echo-request} ip daddr $net_lan accept
	}
}
table ip6 filter {
	chain input {
		type filter hook input priority 0; policy drop;
	}

	chain forward {
		type filter hook forward priority 0; policy drop;
	}

	chain output {
		type filter hook output priority 0; policy drop;
	}
}
#table netdev filter {
#	chain ingress_eth0 {
#		type filter hook ingress device eth0 priority 0; policy accept;
#		udp sport . udp dport { 67 . 68} ether saddr != $net_lan_dhcp flow table evil_dhcp { iif . ip saddr . ether saddr timeout 1m} drop comment "waiting patch : log prefix nftables evil_dhcp level err"
#	}
#}
include "/etc/nftables.tail.conf"
